name: Notify Subscribers of New Post

on:
  push:
    branches:
      - main
    paths:
      - '_posts/**'

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get new post details
        id: post_info
        run: |
          # Get the latest post file
          LATEST_POST=$(ls -t _posts/*.md _posts/*.markdown 2>/dev/null | head -1)
          
          if [ -z "$LATEST_POST" ]; then
            echo "No posts found"
            exit 0
          fi
          
          # Extract front matter
          POST_TITLE=$(grep -m 1 "^title:" "$LATEST_POST" | sed 's/title: *//;s/"//g;s/^\[//;s/\]$//')
          POST_DATE=$(grep -m 1 "^date:" "$LATEST_POST" | sed 's/date: *//')
          POST_DESCRIPTION=$(grep -m 1 "^description:" "$LATEST_POST" | sed 's/description: *//;s/"//g')
          
          # Extract filename to build URL
          FILENAME=$(basename "$LATEST_POST")
          POST_SLUG=$(echo "$FILENAME" | sed 's/^[0-9]*-[0-9]*-[0-9]*-//;s/\.(md|markdown)$//')
          POST_YEAR=$(echo "$FILENAME" | cut -d'-' -f1)
          POST_MONTH=$(echo "$FILENAME" | cut -d'-' -f2)
          POST_DAY=$(echo "$FILENAME" | cut -d'-' -f3)
          
          # Build post URL
          POST_URL="https://blog.juanpaulo.xyz/$POST_YEAR/$POST_MONTH/$POST_DAY/$POST_SLUG.html"
          
          # Output for next steps
          echo "title=$POST_TITLE" >> $GITHUB_OUTPUT
          echo "date=$POST_DATE" >> $GITHUB_OUTPUT
          echo "description=$POST_DESCRIPTION" >> $GITHUB_OUTPUT
          echo "url=$POST_URL" >> $GITHUB_OUTPUT

      - name: Check if this is a new post
        id: check_new
        run: |
          git diff --name-status HEAD^ HEAD | grep "^A.*_posts/" && echo "is_new=true" >> $GITHUB_OUTPUT || echo "is_new=false" >> $GITHUB_OUTPUT

      - name: Get subscriber list from SendGrid
        if: steps.check_new.outputs.is_new == 'true'
        id: get_contacts
        env:
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
          SENDGRID_LIST_ID: ${{ secrets.SENDGRID_LIST_ID }}
        run: |
          cat > get_contacts.py << 'EOF'
          import os
          import json
          import urllib.request
          
          api_key = os.environ['SENDGRID_API_KEY']
          list_id = os.environ['SENDGRID_LIST_ID']
          
          url = "https://api.sendgrid.com/v3/marketing/contacts/search"
          headers = {
              "Authorization": f"Bearer {api_key}",
              "Content-Type": "application/json"
          }
          
          payload = {
              "query": f"CONTAINS(list_ids, '{list_id}')"
          }
          
          req = urllib.request.Request(
              url,
              data=json.dumps(payload).encode('utf-8'),
              headers=headers,
              method='POST'
          )
          
          try:
              with urllib.request.urlopen(req) as response:
                  result = json.loads(response.read().decode('utf-8'))
                  contacts = result.get('result', [])
                  emails = [contact['email'] for contact in contacts]
                  print(f"Found {len(emails)} subscribers")
                  with open('subscribers.json', 'w') as f:
                      json.dump(emails, f)
          except Exception as e:
              print(f"Error: {e}")
              exit(1)
          EOF
          python3 get_contacts.py

      - name: Send emails via SendGrid
        if: steps.check_new.outputs.is_new == 'true'
        env:
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
          SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
          SENDER_NAME: ${{ secrets.SENDER_NAME }}
          POST_TITLE: ${{ steps.post_info.outputs.title }}
          POST_DESCRIPTION: ${{ steps.post_info.outputs.description }}
          POST_URL: ${{ steps.post_info.outputs.url }}
        run: |
          cat > send_emails.py << 'EOF'
          import os
          import json
          import urllib.request
          
          api_key = os.environ['SENDGRID_API_KEY']
          sender_email = os.environ['SENDER_EMAIL']
          sender_name = os.environ.get('SENDER_NAME', 'Blog Notification')
          title = os.environ.get('POST_TITLE', 'New Blog Post')
          description = os.environ.get('POST_DESCRIPTION', '')
          post_url = os.environ['POST_URL']
          
          with open('subscribers.json', 'r') as f:
              subscribers = json.load(f)
          
          html_content = f"""<html>
          <body style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h1 style="color: #333;">{title}</h1>
            <p style="color: #666; line-height: 1.6;">{description if description else 'Check out my latest blog post!'}</p>
            <p style="margin-top: 30px;">
              <a href="{post_url}" style="background-color: #007bff; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px; display: inline-block;">Read the full post</a>
            </p>
          </body>
          </html>"""
          
          plain_content = f"New post: {title}\n\n{description if description else 'Check out my latest blog post!'}\n\nRead more: {post_url}"
          
          personalizations = [{"to": [{"email": email}]} for email in subscribers]
          
          payload = {
              "personalizations": personalizations,
              "from": {
                  "email": sender_email,
                  "name": sender_name
              },
              "subject": f"New Post: {title}",
              "content": [
                  {
                      "type": "text/plain",
                      "value": plain_content
                  },
                  {
                      "type": "text/html",
                      "value": html_content
                  }
              ]
          }
          
          url = "https://api.sendgrid.com/v3/mail/send"
          headers = {
              "Authorization": f"Bearer {api_key}",
              "Content-Type": "application/json"
          }
          
          req = urllib.request.Request(
              url,
              data=json.dumps(payload).encode('utf-8'),
              headers=headers,
              method='POST'
          )
          
          try:
              with urllib.request.urlopen(req) as response:
                  print(f"✓ Emails sent successfully to {len(subscribers)} subscribers!")
          except urllib.error.HTTPError as e:
              error_body = e.read().decode('utf-8')
              print(f"✗ Error: {e.code} - {error_body}")
              exit(1)
          EOF
          python3 send_emails.py
